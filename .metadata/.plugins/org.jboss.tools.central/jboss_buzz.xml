<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Teiid Spring Boot 1.5.0 Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HDBan1RNptw/teiid-spring-boot-150-released.html" /><category term="feed_group_name_teiid" scheme="searchisko:content:tags" /><category term="feed_name_teiid" scheme="searchisko:content:tags" /><author><name>Ramesh Reddy</name></author><id>searchisko:content:id:jbossorg_blog-teiid_spring_boot_1_5_0_released</id><updated>2020-05-22T22:52:18Z</updated><published>2020-05-22T22:52:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;I am excited to announce that Teiid Spring Boot version 1.5.0 released today to the maven repository based on &lt;a href="http://teiid.io/blog/post-140000/"&gt;Teiid 14.0.0&lt;/a&gt; release.&lt;br /&gt;&lt;br /&gt;If you have not used Teiid Spring Boot before, it is built on top Teiid Core libraries with developer simplification in mind. It simplifies the deployment model to a single VDB and provides you with executable binary rather than Server like WildFly where you need to deploy your VDBs.&lt;br /&gt;&lt;br /&gt;The release highlights are&lt;br /&gt;&lt;br /&gt;* Cassandra Data Source support&lt;br /&gt;* Materialization automation&lt;br /&gt;* Spring Boot version to 2.2.6&lt;br /&gt;* Keystore/Truststore simplifications that work across the system&lt;br /&gt;* SOAP Data Source support&lt;br /&gt;* FTP Database Support&lt;br /&gt;* A Lot of changes to detect data sources based on their inclusion as dependencies and consistent naming schemes across both Teiid and Teiid Spring Boot.&lt;br /&gt;&lt;br /&gt;For a full list see &lt;a href="https://issues.redhat.com/browse/TEIIDSB-57?jql=project%20%3D%20TEIIDSB%20AND%20fixVersion%20%3D%201.5.0%20ORDER%20BY%20priority%20DESC%2C%20updated%20DESC"&gt;this&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Take look at the various examples in Teiid Spring Boot and take it for test drive let me know if there are any issues or improvements you see.&lt;br /&gt;&lt;br /&gt;Ramesh..&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HDBan1RNptw" height="1" width="1" alt=""/&gt;</content><summary>I am excited to announce that Teiid Spring Boot version 1.5.0 released today to the maven repository based on Teiid 14.0.0 release. If you have not used Teiid Spring Boot before, it is built on top Teiid Core libraries with developer simplification in mind. It simplifies the deployment model to a single VDB and provides you with executable binary rather than Server like WildFly where you need to d...</summary><dc:creator>Ramesh Reddy</dc:creator><dc:date>2020-05-22T22:52:00Z</dc:date><feedburner:origLink>http://teiid.blogspot.com/2020/05/teiid-spring-boot-150-released.html</feedburner:origLink></entry><entry><title>Stack clash mitigation in GCC, Part 3</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hRphI7H0NRk/" /><category term="C" /><category term="C++" /><category term="Linux" /><category term="Security" /><category term="C stack overflow" /><category term="gcc" /><category term="glibc" /><category term="RHEL" /><category term="stack access" /><author><name>Jeff Law</name></author><id>https://developers.redhat.com/blog/?p=583897</id><updated>2020-05-22T07:00:59Z</updated><published>2020-05-22T07:00:59Z</published><content type="html">&lt;p&gt;In previous posts, &lt;a href="https://developers.redhat.com/blog/2017/09/25/stack-clash-mitigation-gcc-background/"&gt;&lt;em&gt;Stack Clash Mitigation in GCC — Background&lt;/em&gt;&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2019/04/30/stack-clash-mitigation-in-gcc-why-fstack-check-is-not-the-answer/"&gt;&lt;em&gt;Stack Clash mitigation in GCC: Why -fstack-check is not the answer&lt;/em&gt;&lt;/a&gt;, I hopefully showed the basics of how &lt;a target="_blank" rel="nofollow" href="https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt"&gt;stack clash attacks&lt;/a&gt; are structured and why GCC&amp;#8217;s existing &lt;code&gt;-fstack-check&lt;/code&gt; mechanism is insufficient for protection.&lt;/p&gt; &lt;p&gt;So, what should we do? Clearly we want something similar to &lt;code&gt;-fstack-check&lt;/code&gt;, but without the fundamental problems. Enter a new option: &lt;code&gt;-fstack-clash-protection&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The key principles for code generation to prevent a stack clash attack are:&lt;/p&gt; &lt;p&gt;&lt;span id="more-583897"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;No single allocation can be greater than a page. The compiler must translate large requests into a series of page- or smaller-sized requests.&lt;/li&gt; &lt;li&gt;As pages are allocated, emit instructions to probe them. (Let&amp;#8217;s call these &lt;em&gt;explicit probes&lt;/em&gt;.)&lt;/li&gt; &lt;li&gt;A series of sub-page allocations without intervening probes can not allocate more than a page in total.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;A naive implementation around these principles could be highly inefficient, but this option provides the basis for building a secure, high-performance implementation.&lt;/p&gt; &lt;h2&gt;Implicit probes to improve performance&lt;/h2&gt; &lt;p&gt;A stack access that occurs naturally in the code is an &lt;em&gt;implicit probe&lt;/em&gt;. An implicit probe implies no additional cost; therefore, using an implicit probe rather than an explicit probe is advantageous. For example, an implicit probe might occur due to the behavior of the target architecture, the requirements of the application binary interface (ABI), or by analysis of existing memory references in the program.&lt;/p&gt; &lt;p&gt;For example, the call instruction on many processors pushes the return address onto the stack. Thus, the call instruction would fault if the stack was in the stack guard. This is an implicit probe at *sp. Some application binary interfaces require that *sp always contains a back-chain pointer (the pointer to the next outer stack frame). Thus, every stack allocation is required to atomically update *sp. Again, this is an implicit probe of *sp.&lt;/p&gt; &lt;p&gt;We can also analyze the generated code. For example, on one target the caller allocates space for the callee to save registers. Thus, in the callee, a register save to *(sp + 48) is an implicit probe at *(sp + 48). On other targets, the callee often pushes pairs of registers onto the stack at function entry. Those pushes are implicit probes at *sp.&lt;/p&gt; &lt;p&gt;It turns out that taking advantage of the implicit probes noted above can dramatically decrease the amount of explicit probing. If we look at glibc as an example on x86 and PPC we see that less than 2% of the functions in glibc require explicit probing in their prologues. For example, if a function allocates less than a page of stack space on these architectures, then no explicit probe is necessary.&lt;/p&gt; &lt;h2&gt;Current status&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers implemented &lt;code&gt;-fstack-clash-protection&lt;/code&gt; for all &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/technologies/linux-platforms/enterprise-linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) targets starting with RHEL 7.5. RHEL 7.5 enables &lt;code&gt;-fstack-clash-protection&lt;/code&gt; for glibc only. Starting with &lt;a href="https://developers.redhat.com/rhel8/"&gt;RHEL 8&lt;/a&gt;, the entire distribution is compiled with &lt;code&gt;-fstack-clash-protection&lt;/code&gt; and &lt;code&gt;annobin&lt;/code&gt;/&lt;code&gt;annocheck&lt;/code&gt; are used to verify that the distribution was compiled with the proper flags.&lt;/p&gt; &lt;p&gt;Fedora 27 and later enable &lt;code&gt;-fstack-clash-protection&lt;/code&gt; by default for all packages using the standard default compilation options (note that there is no &lt;code&gt;-fstack-clash-protection&lt;/code&gt; support for 32-bit ARM targets).&lt;/p&gt; &lt;p&gt;GCC 8 includes &lt;code&gt;-fstack-clash-protection&lt;/code&gt; support for the Intel, IBM Power, IBM Z series, and ARM&amp;#8217;s aarch64 targets.&lt;/p&gt; &lt;p&gt;LLVM 11 will include stack clash protections for Intel 64 and AMD64 written by Serge Guelton.&lt;/p&gt; &lt;h2&gt;Testing&lt;/h2&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers have written a variety of tests to verify the analysis of static and dynamic stack utilization. Red Hat&amp;#8217;s engineers have also written regression tests for all bugs reported against &lt;code&gt;-fstack-clash-protection&lt;/code&gt; since its introduction to GCC. These tests run as a part of the standard regression testing process for GCC. Most of the tests are portable enough to be usable on other targets if one was to implement stack clash mitigation on a currently unsupported target.&lt;/p&gt; &lt;p&gt;Red Hat&amp;#8217;s engineers also implemented a scanner that can examine relocatable objects, executables, and dynamic shared objects. The scanner looks for violations of the key principles listed above within an instruction window and notifies the developer of suspicious code. Red Hat has used the scanner to scan key libraries and objects (with hand verification of all the sequences reported as potentially vulnerable by the scanner). This practice proved particularly useful in verifying that Fedora 27 was consistently using &lt;code&gt;-fstack-clash-protection&lt;/code&gt; and invalidating improvements to the aarch64 implementation made by ARM&amp;#8217;s engineers.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#38;linkname=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F22%2Fstack-clash-mitigation-in-gcc-part-3%2F&amp;#038;title=Stack%20clash%20mitigation%20in%20GCC%2C%20Part%203" data-a2a-url="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/" data-a2a-title="Stack clash mitigation in GCC, Part 3"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/"&gt;Stack clash mitigation in GCC, Part 3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hRphI7H0NRk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In previous posts, Stack Clash Mitigation in GCC — Background and Stack Clash mitigation in GCC: Why -fstack-check is not the answer, I hopefully showed the basics of how stack clash attacks are structured and why GCC&amp;#8217;s existing -fstack-check mechanism is insufficient for protection. So, what should we do? Clearly we want something similar to -fstack-check, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/"&gt;Stack clash mitigation in GCC, Part 3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">583897</post-id><dc:creator>Jeff Law</dc:creator><dc:date>2020-05-22T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3/</feedburner:origLink></entry><entry><title>Use Node.js 14 on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SXjlHKa8Wo8/" /><category term="JavaScript" /><category term="Linux" /><category term="Node.js" /><category term="Universal Base Images (UBI)" /><category term="Docker" /><category term="node.js 14" /><category term="openshift" /><category term="RHEL" /><author><name>Lucas Holmquist</name></author><id>https://developers.redhat.com/blog/?p=719127</id><updated>2020-05-21T07:00:49Z</updated><published>2020-05-21T07:00:49Z</published><content type="html">&lt;p&gt;On April 21st, &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt; released its latest major version with &lt;a href="https://nodejs.org/en/blog/release/v14.0.0/"&gt;Node.js 14&lt;/a&gt;. Because this is an even-numbered release, it will become a Long Term Support (LTS) release in October 2020. This release brings a host of improvements and features, such as improved diagnostics, a V8 upgrade, an experimental Async Local Storage API, hardened the streams APIs, and more.&lt;/p&gt; &lt;p&gt;While Red Hat will release a &lt;a href="https://developers.redhat.com/blog/category/ubi/"&gt;Universal Base Image (UBI)&lt;/a&gt; for Node.js 14 in the coming months for &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux&lt;/a&gt;, this article helps you get started today. If you&amp;#8217;re interested in more about Node.js 14&amp;#8217;s improvements and new features, check out the article listed at the end. &lt;span id="more-719127"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s use a sample application that is based on the official &lt;a target="_blank" rel="nofollow" href="https://nodejs.org/fr/docs/guides/nodejs-docker-webapp/#dockerizing-a-node-js-web-app"&gt;&lt;em&gt;How to Dockerize a Node.js Application&lt;/em&gt; Nodejs.org docs&lt;/a&gt;. This is a simple Express.js application with a Dockerfile using the latest upstream community Node.js 14 image.&lt;/p&gt; &lt;h2&gt;How to deploy&lt;/h2&gt; &lt;p&gt;First, use the &lt;code&gt;oc new-app&lt;/code&gt; command with a Git repo that has a Dockerfile in it:&lt;/p&gt; &lt;pre&gt;$ oc new-app https://github.com/nodeshift-starters/basic-node-app-dockerized &lt;/pre&gt; &lt;p&gt;To access your application, you need to expose it using this simple command:&lt;/p&gt; &lt;pre&gt;$ oc expose svc/basic-node-app-dockerized &lt;/pre&gt; &lt;p&gt;Or, you can use the &lt;a target="_blank" rel="nofollow" href="https://www.npmjs.com/package/nodeshift"&gt;Nodeshift module&lt;/a&gt; to deploy a local directory. Assuming that you cloned the project we used earlier, you can run this command:&lt;/p&gt; &lt;pre&gt;$ npx nodeshift --build.strategy=Docker --expose &lt;/pre&gt; &lt;h3&gt;Wrap up&lt;/h3&gt; &lt;p&gt;As you can see, using Node.js 14 on Red Hat OpenShift today is pretty simple. To learn more about the improvements and features in Node.js 14, check out the official &lt;a target="_blank" rel="nofollow" href="https://medium.com/@nodejs/node-js-version-14-available-now-8170d384567e"&gt;Node.js blog post&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#38;linkname=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fuse-node-js-14-on-red-hat-openshift%2F&amp;#038;title=Use%20Node.js%2014%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/" data-a2a-title="Use Node.js 14 on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/"&gt;Use Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SXjlHKa8Wo8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;On April 21st, Node.js released its latest major version with Node.js 14. Because this is an even-numbered release, it will become a Long Term Support (LTS) release in October 2020. This release brings a host of improvements and features, such as improved diagnostics, a V8 upgrade, an experimental Async Local Storage API, hardened the streams [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/"&gt;Use Node.js 14 on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">719127</post-id><dc:creator>Lucas Holmquist</dc:creator><dc:date>2020-05-21T07:00:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/21/use-node-js-14-on-red-hat-openshift/</feedburner:origLink></entry><entry><title>Cloud-native computing terms all in one place</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Z7_G6OLeORE/" /><category term="Developer Tools" /><category term="DevOps" /><category term="Kubernetes" /><category term="cloud native" /><category term="dark launch" /><category term="eventual consistency" /><category term="gRPC" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=701097</id><updated>2020-05-21T07:00:30Z</updated><published>2020-05-21T07:00:30Z</published><content type="html">&lt;p&gt;What does &lt;em&gt;eventual consistency&lt;/em&gt; even mean? Or, how about a &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/dark-launch.md"&gt;dark launch&lt;/a&gt;? What is &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/grpc.md"&gt;gRPC&lt;/a&gt;? Or a database &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/sagas.md"&gt;saga&lt;/a&gt;? Wouldn&amp;#8217;t it be great if someone gathered all the terms associated with cloud-native computing and put them in one place, where developers could find, link to, and even update them?&lt;/p&gt; &lt;p&gt;Well, guess what: &lt;a href="https://developers.redhat.com"&gt;Red Hat Developer&lt;/a&gt; has done just that with &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass"&gt;Cloud Native Compass&lt;/a&gt;, a GitHub repository containing definitions of terms and links to related materials for cloud-native software development and microservices.&lt;/p&gt; &lt;h2&gt;How to use Cloud Native Compass&lt;/h2&gt; &lt;p&gt;From &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/event-driven-architecture.md"&gt;event-driven architecture&lt;/a&gt; (EDA) to &lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass/blob/master/write-only-database.md"&gt;write-only database&lt;/a&gt;, we&amp;#8217;ve attempted to define all of the terms you&amp;#8217;ll need to know as a cloud-native developer. Are you interested in sidecar containers? Tekton? Are you curious about what it means to use a ubiquitous language over a bounded context? Cloud Native Compass has you covered.&lt;/p&gt; &lt;p&gt;The entire project is open source, too. So, if you find definitions missing, or if you believe a definition is mistaken, or if something has changed since the definition was written—well, you can change it. Do you want to expand on a definition, or add a diagram? Simply fork the repo to your GitHub organization, make your changes, and submit a pull request.&lt;/p&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/redhat-developer-demos/cloud-native-compass"&gt;Cloud Native Compass&lt;/a&gt; is yours; it belongs to all of us. Feel free to use it as required.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#38;linkname=Cloud-native%20computing%20terms%20all%20in%20one%20place" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F21%2Fcloud-native-computing-terms-all-in-one-place%2F&amp;#038;title=Cloud-native%20computing%20terms%20all%20in%20one%20place" data-a2a-url="https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/" data-a2a-title="Cloud-native computing terms all in one place"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/"&gt;Cloud-native computing terms all in one place&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Z7_G6OLeORE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;What does eventual consistency even mean? Or, how about a dark launch? What is gRPC? Or a database saga? Wouldn&amp;#8217;t it be great if someone gathered all the terms associated with cloud-native computing and put them in one place, where developers could find, link to, and even update them? Well, guess what: Red Hat Developer [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/"&gt;Cloud-native computing terms all in one place&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">701097</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2020-05-21T07:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/21/cloud-native-computing-terms-all-in-one-place/</feedburner:origLink></entry><entry><title>Reality Bites: 3 misconceptions that can lead to microservice mayhem (slides)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GH5TyFmfc5U/reality-bites-3-misconceptions-can-lead-to-micorservice-mayhem-slides.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JBossAMQ" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-reality_bites_3_misconceptions_that_can_lead_to_microservice_mayhem_slides</id><updated>2020-05-20T11:30:01Z</updated><published>2020-05-20T11:30:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Wt6lh11GLFA/XsO1DSYFhkI/AAAAAAAAxJ8/MgkRbP7GOKMbn56dNxi1dLUwwczpljdQACNcBGAsYHQ/s1600/Screenshot%2B2020-05-19%2Bat%2B12.29.23.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="reality bites microservices" border="0" data-original-height="784" data-original-width="1451" height="172" src="https://1.bp.blogspot.com/-Wt6lh11GLFA/XsO1DSYFhkI/AAAAAAAAxJ8/MgkRbP7GOKMbn56dNxi1dLUwwczpljdQACNcBGAsYHQ/s320/Screenshot%2B2020-05-19%2Bat%2B12.29.23.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Today we held an internal, yep, an internal only mini Red Hat Summit.&lt;br /&gt;&lt;br /&gt;This is a chance for talks to be presented select content to an internal worldwide audience at Red Hat, but that does not mean that all the content is confidential. That means I would be remiss if I didn't share my session content.&lt;br /&gt;&lt;br /&gt;In 2019, together with &lt;a href="https://twitter.com/RoelHodzelmans" target="_blank"&gt;Roel Hodzelmans&lt;/a&gt;, we presented a Red Hat Summit birds of a feather session called &lt;a href="https://www.schabell.org/2019/05/redhat-summit-2019-3-pitfalls-microservices.html" target="_blank"&gt;3 pitfalls everyone should avoid with microservices&lt;/a&gt;. This was the foundational start to our journey along the lines of sharing what is concerning to many of our customers.&lt;br /&gt;&lt;br /&gt;We explored some of the feedback from our session and continuing interactions with customers in the five part series &lt;a href="https://dzone.com/articles/5-questions-everyones-asking-about-microservices-p" target="_blank"&gt;5 questions everyone is asking about microservices&lt;/a&gt;. Furthermore, some of the material led to the creation of two architectural blueprints around agile integration use cases:&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://dzone.com/articles/integration-key-to-experience-an-introduction-part" target="_blank"&gt;Omnichannel customer experience&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://dzone.com/articles/integrating-with-saas-applications-an-introduction" target="_blank"&gt;Integrate with SaaS applications&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;See below how this led to our reality bites session &lt;a href="https://insidebigdata.com/2020/02/15/reality-bites-3-misconceptions-that-can-lead-to-microservice-mayhem/" target="_blank"&gt;based on our article on InsideBigData.com&lt;/a&gt;&amp;nbsp;and access the slides.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;Below you'll find the abstract and slides from my session:&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;&lt;span style="font-size: 18.72px;"&gt;Reality Bites: 3 misconceptions that can lead to microservice mayhem&lt;/span&gt;&lt;/h3&gt;&lt;i&gt;Microservices are core to organizations’ flexibility and agility in the digital world. But that doesn’t mean that microservices are right for every use case or even for every organization—at least, not right now. There is no doubt that microservices are becoming the mainstream. Within the next two years, 90% of all new apps will feature microservices architecture, according to “IDC FutureScape: Worldwide IT Industry 2019 Predictions.” Indeed, as organizations witness (and drive) more and more microservices success stories, they may feel compelled to join the race and accelerate their current microservices initiatives. Whether that is a good move or not depends not just on the readiness of the organization, but also on its willingness and ability to acknowledge some hard truths about the microservices model and culture. Let me take you on a tour of the reality behind three microservices misconceptions—and share real world implementation insights as to why that reality can sometimes bite.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="420" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/A3DnVr8PeG4vG4" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="510"&gt; &lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Comments and or feedback welcome, &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;just drop me a note&lt;/a&gt;!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=-QCcI7vZuks:R4aXfGHzPSU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=-QCcI7vZuks:R4aXfGHzPSU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/-QCcI7vZuks" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GH5TyFmfc5U" height="1" width="1" alt=""/&gt;</content><summary>Today we held an internal, yep, an internal only mini Red Hat Summit. This is a chance for talks to be presented select content to an internal worldwide audience at Red Hat, but that does not mean that all the content is confidential. That means I would be remiss if I didn't share my session content. In 2019, together with Roel Hodzelmans, we presented a Red Hat Summit birds of a feather session c...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-05-20T11:30:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/-QCcI7vZuks/reality-bites-3-misconceptions-can-lead-to-micorservice-mayhem-slides.html</feedburner:origLink></entry><entry><title>Getting started with the fabric8 Kubernetes Java client</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PQIOHQxeh3s/" /><category term="CI/CD" /><category term="DevOps" /><category term="Java" /><category term="Kubernetes" /><category term="apache maven" /><category term="fabric8" /><category term="Kubernetes java" /><category term="openshift" /><author><name>Rohan Kumar</name></author><id>https://developers.redhat.com/blog/?p=711637</id><updated>2020-05-20T07:00:21Z</updated><published>2020-05-20T07:00:21Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client"&gt;Fabric8&lt;/a&gt; has been available as a Java client for &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; since 2015, and today is one of the most popular client libraries for Kubernetes. (The most popular is &lt;a target="_blank" rel="nofollow" href="https://github.com/kubernetes/client-go"&gt;client-go&lt;/a&gt;, which is the client library for the Go programming language on Kubernetes.) In recent years, fabric8 has evolved from a Java client for the Kubernetes REST API to a full-fledged alternative to the &lt;code&gt;kubectl&lt;/code&gt; command-line tool for Java-based development.&lt;/p&gt; &lt;p&gt;&lt;span id="more-711637"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Fabric8 is much more than a simple REST client for Java. Its features include a rich domain-specific language (DSL), a model for advanced code handling and manipulation, extension hooks, a mock server for testing, and many client-side utilities. In addition to hooks for building new extensions, the fabric8 Kubernetes Java client has extensions for &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;Knative&lt;/a&gt;, Tekton, &lt;a target="_blank" rel="nofollow" href="https://github.com/kubernetes-sigs/service-catalog"&gt;Kubernetes Service Catalog&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.1/applications/service_brokers/installing-service-catalog.html"&gt;Red Hat OpenShift Service Catalog&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-assertions"&gt;Kubernetes Assertions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Many popular projects use fabric8, including &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, Apache Camel, Apache Spark, and many more. See &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client#who-uses-kubernetes--openshift-java-client"&gt;which projects work with this Kubernetes and OpenShift Java client here.&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Using fabric8 with Kubernetes&lt;/h2&gt; &lt;p&gt;Using Fabric8 is straightforward, especially because it offers an API for accessing Kubernetes resources. To get started with the Java client, you just add it as a dependency in your Maven &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.fabric8&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;kubernetes-client&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.9.1&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;Alternatively, you could use &lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;dependencies { compile 'io.fabric8:kubernetes-client:4.9.1' } &lt;/pre&gt; &lt;p&gt;Next, we&amp;#8217;ll look at a couple of common examples.&lt;/p&gt; &lt;h3&gt;Example 1: Listing pods in a namespace&lt;/h3&gt; &lt;p&gt;Here&amp;#8217;s an example of listing all of the client pods in a namespace:&lt;/p&gt; &lt;pre&gt;try (KubernetesClient client = new DefaultKubernetesClient()) { client.pods().inNamespace("default").list().getItems().forEach( pod -&amp;#62; System.out.println(pod.getMetadata().getName()) ); } catch (KubernetesClientException ex) { // Handle exception ex.printStackTrace(); } &lt;/pre&gt; &lt;h3&gt;Example 2: Server authentication&lt;/h3&gt; &lt;p&gt;When you use the &lt;code&gt;DefaultKubernetesClient&lt;/code&gt;, it will try to read the &lt;code&gt;~/.kube/config&lt;/code&gt; file in your home directory and load information required for authenticating with the Kubernetes API server. You can override this configuration with the system property &lt;code&gt;KUBECONFIG&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you are using &lt;code&gt;DefaultKubernetesClient&lt;/code&gt; from inside a &lt;code&gt;Pod&lt;/code&gt;, it will load &lt;code&gt;~/.kube/config&lt;/code&gt; from the &lt;code&gt;ServiceAccount&lt;/code&gt; volume mounted inside the &lt;code&gt;Pod&lt;/code&gt;. For a more complex configuration, you can simply pass a &lt;code&gt;Config&lt;/code&gt; object inside &lt;code&gt;DefaultKubernetesClient&lt;/code&gt;, like this:&lt;/p&gt; &lt;pre&gt;Config config = new ConfigBuilder() .withMasterUrl("https://api.rh-idev.openshift.com:443") .build(); try (KubernetesClient client = new DefaultKubernetesClient(config)) { client.pods().inNamespace("default").list().getItems().forEach( pod -&amp;#62; System.out.println(pod.getMetadata().getName()) ); } catch (KubernetesClientException ex) { // Handle exception ex.printStackTrace(); } &lt;/pre&gt; &lt;h2&gt;Learn more about fabric8&lt;/h2&gt; &lt;p&gt;Fabric8&amp;#8217;s development team consists of mostly Java developers, so a Java developer&amp;#8217;s perspective heavily influences this client. In this article, I&amp;#8217;ve demonstrated just a few of fabric8&amp;#8217;s features for using Kubernetes APIs in a Java environment. For more examples, see the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-examples/src/main/java/io/fabric8/kubernetes/examples"&gt;Kubernetes Java client examples repository&lt;/a&gt;. And for a deep dive into using fabric8, visit the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8io/kubernetes-client/blob/master/doc/CHEATSHEET.md"&gt;Fabric8 Kubernetes Java Client Cheat Sheet&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#38;linkname=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F20%2Fgetting-started-with-the-fabric8-kubernetes-java-client%2F&amp;#038;title=Getting%20started%20with%20the%20fabric8%20Kubernetes%20Java%20client" data-a2a-url="https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/" data-a2a-title="Getting started with the fabric8 Kubernetes Java client"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/"&gt;Getting started with the fabric8 Kubernetes Java client&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PQIOHQxeh3s" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Fabric8 has been available as a Java client for Kubernetes since 2015, and today is one of the most popular client libraries for Kubernetes. (The most popular is client-go, which is the client library for the Go programming language on Kubernetes.) In recent years, fabric8 has evolved from a Java client for the Kubernetes REST [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/"&gt;Getting started with the fabric8 Kubernetes Java client&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">711637</post-id><dc:creator>Rohan Kumar</dc:creator><dc:date>2020-05-20T07:00:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/20/getting-started-with-the-fabric8-kubernetes-java-client/</feedburner:origLink></entry><entry><title>Extending Kafka connectivity with Apache Camel Kafka connectors</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/V5mQCihnW6I/" /><category term="Event-Driven" /><category term="Microservices" /><category term="Open source" /><category term="Stream Processing" /><category term="apache camel" /><category term="Apache Kafka" /><category term="kafka connect" /><category term="Kubernetes Operator" /><category term="Strimzi" /><author><name>Hugo Guerrero</name></author><id>https://developers.redhat.com/blog/?p=718137</id><updated>2020-05-19T07:00:16Z</updated><published>2020-05-19T07:00:16Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://kafka.apache.org/"&gt;Apache Kafka&lt;/a&gt; is one of the most used pieces of software in modern application development because of its distributed nature, high throughput, and horizontal scalability. Every day more and more organizations are adopting Kafka as the central event bus for their &lt;a href="https://developers.redhat.com/topics/event-driven/"&gt;event-driven architecture&lt;/a&gt;. As a result, more and more data flows through the cluster, making the connectivity requirements rise in priority for any backlog. For this reason, the &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; community released the first iteration of &lt;a target="_blank" rel="nofollow" href="https://kafka.apache.org/documentation.html#connect"&gt;Kafka Connect&lt;/a&gt; connectors for the purpose of easing the burden on development teams.&lt;span id="more-718137"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is Apache Camel?&lt;/h2&gt; &lt;p&gt;The Camel community has built one of the &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/blog/ASF-Report-2019/"&gt;busiest&lt;/a&gt; open source integration frameworks in the &lt;a target="_blank" rel="nofollow" href="https://www.apache.org/"&gt;Apache Foundation&lt;/a&gt;. The Camel framework lets you quickly and easily integrate data consumer and producer systems. It implements the most used &lt;a target="_blank" rel="nofollow" href="https://www.enterpriseintegrationpatterns.com/"&gt;Enterprise Integration Patterns&lt;/a&gt; (EIPs), plus the interfaces and protocols that are used everywhere, as they emerge. Having everything under the same component base configuration lets you create the required building blocks to solve almost any integration requirement.&lt;/p&gt; &lt;h2&gt;What is the Camel Kafka Connector project?&lt;/h2&gt; &lt;p&gt;After maturing for almost a decade, the Camel community spun a couple of &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/projects/"&gt;subprojects&lt;/a&gt; to foster innovation in areas like runtime support and container readiness. In particular, the Camel Kafka Connector subproject focuses on the use of Camel components as Kafka Connect connectors. With this in mind, they built a tiny layer between Camel and Kafka frameworks to easily use each Camel component as a Kafka connector that can be used effortlessly in the Kafka ecosystem.&lt;/p&gt; &lt;p&gt;This project&amp;#8217;s &lt;a href="https://camel.apache.org/blog/Camel-Kafka-connector-release-0.1.0/"&gt;first release&lt;/a&gt; allows the community to try and share feedback on the autogenerated connectors. Despite being the first release of this subproject, most of the underlying Camel components are battle-tested and used all around the world in production scenarios.&lt;/p&gt; &lt;h2&gt;Getting started with Camel Kafka connectors&lt;/h2&gt; &lt;p&gt;There are more than &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-kafka-connector/latest/connectors.html"&gt;340+ Camel Kafka connectors&lt;/a&gt; to get started, ranging from AWS S3 integration to Telegram or Slack. So it should be easy to find a use case to implement a small project.&lt;/p&gt; &lt;p&gt;In order to simplify Kafka Connect cluster deployment, you can use the &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/concepts/extend-kubernetes/operator/"&gt;Kubernetes Operator&lt;/a&gt; from the &lt;a target="_blank" rel="nofollow" href="https://landscape.cncf.io/selected=strimzi"&gt;Strimzi&lt;/a&gt; project to run on Minikube or Kind on your laptop. Then, search for and download the connector package zip version from the &lt;a target="_blank" rel="nofollow" href="https://repo1.maven.org/maven2/org/apache/camel/kafkaconnector/"&gt;Maven central repository&lt;/a&gt;. The zip file should contain all of the library jars required to run the connector in your plugins path. Next, create a container image with your plugins on top of the Strimzi base image so you can use the image as the Kafka Connect base. And then, finally, configure the connector using the Kafka Connect REST API or the new &lt;a target="_blank" rel="nofollow" href="https://strimzi.io/docs/latest/#proc-deploying-kafkaconnector-str"&gt;Strimzi Kafka Connector&lt;/a&gt; custom resource definition (CRD).&lt;/p&gt; &lt;p&gt;You can also try the connectors locally on your laptop without the need for Kubernetes. You just need a locally running Kafka instance &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-kafka-connector/latest/try-it-out-locally.html"&gt;and to follow these instructions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Want to see how it looks when running? Watch my video on integrating Slack to Kafka:&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/tkkPO7hu848?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;Apache Kafka is used as an event backbone in new organizations every day. Communities like Apache Camel are working on how to speed up development in key areas of the modern application, like integration. The Camel Kafka Connect project from the Apache Foundation has enabled their vast set of connectors to interact with Kafka Connect natively so that developers can start sending and receiving data from Kafka on their preferred systems.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Featured image source: &amp;#8220;Getting Kafka ready for the Camel Ride&amp;#8221; is a derivative work of &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://flic.kr/p/5Hntiw"&gt;Kafka&lt;/a&gt;&amp;#8221; by &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://www.flickr.com/photos/malaqa/"&gt;g p&lt;/a&gt;&amp;#8221; and &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://flic.kr/p/2hNq3ba"&gt;Camel&lt;/a&gt;&amp;#8221; by &amp;#8220;&lt;a target="_blank" rel="nofollow" href="https://www.flickr.com/photos/162485676@N06/"&gt;Ziad Fhema&lt;/a&gt;,&amp;#8221; used under &lt;a target="_blank" rel="nofollow" href="https://creativecommons.org/licenses/by/2.0/"&gt;CC BY 2.0&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#38;linkname=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F19%2Fextending-kafka-connectivity-with-apache-camel-kafka-connectors%2F&amp;#038;title=Extending%20Kafka%20connectivity%20with%20Apache%20Camel%20Kafka%20connectors" data-a2a-url="https://developers.redhat.com/blog/2020/05/19/extending-kafka-connectivity-with-apache-camel-kafka-connectors/" data-a2a-title="Extending Kafka connectivity with Apache Camel Kafka connectors"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/19/extending-kafka-connectivity-with-apache-camel-kafka-connectors/"&gt;Extending Kafka connectivity with Apache Camel Kafka connectors&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/V5mQCihnW6I" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Apache Kafka is one of the most used pieces of software in modern application development because of its distributed nature, high throughput, and horizontal scalability. Every day more and more organizations are adopting Kafka as the central event bus for their event-driven architecture. As a result, more and more data flows through the cluster, making [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/19/extending-kafka-connectivity-with-apache-camel-kafka-connectors/"&gt;Extending Kafka connectivity with Apache Camel Kafka connectors&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">718137</post-id><dc:creator>Hugo Guerrero</dc:creator><dc:date>2020-05-19T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/19/extending-kafka-connectivity-with-apache-camel-kafka-connectors/</feedburner:origLink></entry><entry><title>Deploy and bind enterprise-grade microservices with Kubernetes Operators</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RgaUsMAL6sE/" /><category term="CI/CD" /><category term="Knative" /><category term="Kubernetes" /><category term="Microservices" /><category term="Operator" /><category term="Open Liberty Operator" /><category term="openshift" /><category term="Red Hat Runtimes" /><category term="restful services" /><category term="runtimes" /><author><name>Arthur De Magalhaes</name></author><id>https://developers.redhat.com/blog/?p=678087</id><updated>2020-05-18T07:00:10Z</updated><published>2020-05-18T07:00:10Z</published><content type="html">&lt;p&gt;Deploying enterprise-grade runtime components into &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; can be daunting. You might wonder:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How do I fetch a certificate for my app?&lt;/li&gt; &lt;li&gt;What&amp;#8217;s the syntax for autoscaling resources with the Horizontal Pod Autoscaler?&lt;/li&gt; &lt;li&gt;How do I link my container with a database and with a Kafka cluster?&lt;/li&gt; &lt;li&gt;Are my metrics going to Prometheus?&lt;/li&gt; &lt;li&gt;Also, how do I scale to zero with &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;Knative&lt;/a&gt;?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Operators can help with all of those needs and more. In this article, I introduce three Operators—Runtime Component Operator, Service Binding Operator, and Open Liberty Operator—that work together to help you deploy containers like a pro.&lt;/p&gt; &lt;p&gt;&lt;span id="more-678087"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Runtime Component Operator: A personal assistant for your microservices&lt;/h2&gt; &lt;p&gt;What better way to upgrade your microservice to executive status than to provide it with a personal assistant? Besides sounding cool, it will make your Kubernetes deployment a lot easier.&lt;/p&gt; &lt;p&gt;To get started, go to &lt;a target="_blank" rel="nofollow" href="https://operatorhub.io/"&gt;OperatorHub.io&lt;/a&gt;. Note the Operator categories in the drop-down list to the left of your screen. Click the link for &lt;strong&gt;Application Runtime&lt;/strong&gt; Operators, then filter that to just the two &lt;a target="_blank" rel="nofollow" href="https://operatorhub.io/?category=Application+Runtime&amp;#38;capabilityLevel=%5B%22Auto+Pilot%22%5D"&gt;Auto-Pilot&lt;/a&gt; entries under &lt;strong&gt;Capability Level&lt;/strong&gt;. (These are Level 5, the highest level on OperatorHub.) You will see two options: &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/runtime-component-operator"&gt;Runtime Component Operator&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenLiberty/open-liberty-operator"&gt;Open Liberty Operator&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The two tools are related: Runtime Component Operator is the upstream community that fuels Open Liberty Operator. I&amp;#8217;ll introduce Runtime Component Operator first. Later in the article, I&amp;#8217;ll introduce a couple of Open Liberty Operator&amp;#8217;s unique features.&lt;/p&gt; &lt;h3&gt;Overview of Runtime Component Operator&lt;/h3&gt; &lt;p&gt;As shown in Figure 1, Runtime Component Operator lets you deploy any runtime container—&lt;a href="https://developers.redhat.com/blog/2019/11/14/open-liberty-java-runtime-now-available-to-red-hat-runtimes-subscribers/"&gt;Liberty&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;JBoss&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt;Node.js&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt;, and so on.&lt;/p&gt; &lt;div id="attachment_709208" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/runtime-component-operator"&gt;&lt;img aria-describedby="caption-attachment-709208" class="wp-image-709208 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-15-at-7.56.59-PM-1024x388.png" alt="A flow diagram of Runtime Component Operator in a Kubernetes deployment." width="640" height="243" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-15-at-7.56.59-PM-1024x388.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-15-at-7.56.59-PM-300x114.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-15-at-7.56.59-PM-768x291.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-709208" class="wp-caption-text"&gt;Figure 1. Runtime Component Operator in a Kubernetes deployment.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Runtime Component Operator can assist you with any of the following everyday deployment activities:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Creating and deploying k8s resources.&lt;/li&gt; &lt;li&gt;Toggling to create Knative or &lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;serverless&lt;/a&gt; resources.&lt;/li&gt; &lt;li&gt;Deploying an image from an image stream (including integration with &lt;code&gt;BuildConfig&lt;/code&gt;).&lt;/li&gt; &lt;li&gt;Autoscaling with Horizontal Pod Autoscaler.&lt;/li&gt; &lt;li&gt;Managing resource constraints.&lt;/li&gt; &lt;li&gt;Integrating with Prometheus (it&amp;#8217;s built-in).&lt;/li&gt; &lt;li&gt;Integrating with a certificate manager.&lt;/li&gt; &lt;li&gt;Creating routes with Transport Layer Security (TLS).&lt;/li&gt; &lt;li&gt;Implementing TLS between microservices.&lt;/li&gt; &lt;li&gt;Probing for readiness or liveness.&lt;/li&gt; &lt;li&gt;Setting up environment variables.&lt;/li&gt; &lt;li&gt;Setting up easy two-step volume persistence.&lt;/li&gt; &lt;li&gt;Integrating with kAppNav and &lt;a href="https://developers.redhat.com/openshift"&gt;Red Hat OpenShift&lt;/a&gt;&amp;#8216;s topology view&lt;/li&gt; &lt;li&gt;Binding app-to-app services.&lt;/li&gt; &lt;li&gt;Binding app-to-resource services.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;And that&amp;#8217;s just the shortlist. See the &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/runtime-component-operator/blob/master/doc/user-guide.adoc"&gt;Runtime Component Operator User Guide&lt;/a&gt; for more details.&lt;/p&gt; &lt;p&gt;Next, let&amp;#8217;s look at how Runtime Component Operator helps you solve real-world problems.&lt;/p&gt; &lt;h3&gt;Mutual TLS trust&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s say that you wanted to deploy two or more microservices that have established mutual TLS trust. You plan on using certificates issued by a cluster certificate authority (CA). You &lt;em&gt;could&lt;/em&gt; try to set up the deployment manually, or you could simply use a configuration like this:&lt;/p&gt; &lt;pre&gt;apiVersion: app.stacks/v1beta1 kind: RuntimeComponent metadata: name: my-app namespace: test spec: applicationImage: registry.connect.redhat.com/ibm/open-liberty-samples:springPetClinic service: port: 9080 certificate: {} &lt;/pre&gt; &lt;h3&gt;Image streams&lt;/h3&gt; &lt;p&gt;For another example, let&amp;#8217;s say that you want to deploy an image stream (perhaps as the result of a &lt;code&gt;BuildConfig&lt;/code&gt;) using Knative. This simple configuration achieves it:&lt;/p&gt; &lt;pre&gt;apiVersion: app.stacks/v1beta1 kind: RuntimeComponent metadata: name: my-app namespace: test spec: applicationImage: my-namespace/my-image-stream:1.0 createKnativeService: true expose: true &lt;/pre&gt; &lt;p&gt;With one toggle (&lt;code&gt;createKnativeService&lt;/code&gt;), you can switch from using vanilla Kubernetes resources to Knative (serverless) resources. The &lt;code&gt;expose&lt;/code&gt; element automatically creates a route for your microservice.&lt;/p&gt; &lt;h3&gt;Connecting RESTful services&lt;/h3&gt; &lt;p&gt;Now let&amp;#8217;s say that you want to connect two or more RESTful services. Not a problem. Just let Runtime Component Operator know that you want to expose or consume a service, like this:&lt;/p&gt; &lt;pre&gt;apiVersion: app.stacks/v1beta1 kind: RuntimeComponent metadata: name: my-provider namespace: test spec: applicationImage: appruntime/samples:service-binding-provider service: port: 9080 provides: category: openapi context: /my-context &lt;/pre&gt; &lt;p&gt;In this case, the YAML deploys the providing microservice and makes itself bindable to other microservices, which can then request the binding:&lt;/p&gt; &lt;pre&gt;apiVersion: app.stacks/v1beta1 kind: RuntimeComponent metadata: name: my-consumer namespace: test spec: applicationImage: appruntime/samples:service-binding-consumer service: port: 9080 consumes: - category: openapi name: my-provider &lt;/pre&gt; &lt;p&gt;That&amp;#8217;s all you need to do. Runtime Component Operator will inject the requested binding information into the consuming microservice.&lt;/p&gt; &lt;p&gt;That&amp;#8217;s impressive, but what if you needed to bind to resources that Runtime Component Operator didn&amp;#8217;t own? Next, I&amp;#8217;ll show you how to use the new &lt;a target="_blank" rel="nofollow" href="https://application-stacks.github.io/service-binding-specification/"&gt;Service Binding Specification&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/"&gt;Red Hat Service Binding Operator&lt;/a&gt; for just that scenario.&lt;/p&gt; &lt;h2&gt;Service Binding Specification: Bring order to your bindings&lt;/h2&gt; &lt;p&gt;A few months ago, a new community formed to standardize service bindings within Kubernetes. This collaboration has resulted in the first release candidate of the Service Binding Specification.&lt;/p&gt; &lt;p&gt;This specification focuses on the following questions related to service bindings:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How do we make something bindable?&lt;/li&gt; &lt;li&gt;What is the binding schema to be exposed to?&lt;/li&gt; &lt;li&gt;How do we request a binding?&lt;/li&gt; &lt;li&gt;How is the binding data injected or mounted into the microservice?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The specification expands each of these topics in detail—for example, it &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/service-binding-specification/blob/master/annotations.md"&gt;thoroughly illustrates the data model&lt;/a&gt; based on &lt;code&gt;x-descriptor&lt;/code&gt;s and &lt;code&gt;annotation&lt;/code&gt;s.&lt;/p&gt; &lt;h3&gt;Red Hat Service Binding Operator&lt;/h3&gt; &lt;p&gt;A specification is useful for creating a consistent path for service producers and consumers to follow. Having a reference implementation is even better. &lt;a href="https://developers.redhat.com/blog/2019/12/19/introducing-the-service-binding-operator/"&gt;Red Hat Service Binding Operator&lt;/a&gt; works together with Runtime Component Operator to improve service binding in Kubernetes deployments.&lt;/p&gt; &lt;p&gt;Service Binding Operator is at the center of the binding: It watches for and manages incoming &lt;code&gt;ServiceBindingRequest&lt;/code&gt; custom resources (CRs). These are YAML artifacts that describe the services we are binding.&lt;/p&gt; &lt;p&gt;Out-of-the-box, Service Binding Operator processes specification-compliant annotations from bindable services. It also has a very useful &lt;code&gt;autoDetect&lt;/code&gt; mode that allows it to walk through owned &lt;code&gt;Secret&lt;/code&gt;s, &lt;code&gt;ConfigMap&lt;/code&gt;s, &lt;code&gt;Route&lt;/code&gt;s, and so on. It can then expose the binding data extracted from those resources. This &amp;#8220;zero code change&amp;#8221; approach is a great way to work with existing services, even before they adhere to the new Service Binding Specification.&lt;/p&gt; &lt;p&gt;Runtime Component Operator&amp;#8217;s role is to detect (automatically or via a reference) a &lt;code&gt;ServiceBindingRequest&lt;/code&gt; that links to one of its deployed microservices. It will then inject or mount the corresponding information.&lt;/p&gt; &lt;p&gt;Check out the &amp;#8220;Service Binding&amp;#8221; section of the &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/runtime-component-operator/blob/master/doc/user-guide.adoc"&gt;Runtime Component Operator User Guide&lt;/a&gt; for more information about deploying Runtime Component Operator and Service Binding Operator together.&lt;/p&gt; &lt;h3&gt;A quick demonstration&lt;/h3&gt; &lt;p&gt;If you want to see how these two Operators work together, check out our &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/sample-service-binding-postgresql"&gt;sample application&lt;/a&gt;: Binding a PostgreSQL Operator database to a &lt;a href="https://developers.redhat.com/topics/spring-boot/"&gt;Spring Boot&lt;/a&gt; application. An Operator manages the PostgreSQL Operator database, and the Spring Boot app is deployed and managed by Runtime Component Operator using Service Binding Operator.&lt;/p&gt; &lt;p&gt;In the demo, we start by deploying a &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/sample-service-binding-postgresql/blob/master/manifests/create-postgresql-db-instance.yaml"&gt;Database CR&lt;/a&gt;, which is used by the PostgreSQL Operator to create our database.&lt;/p&gt; &lt;p&gt;Next, we deploy a &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/sample-service-binding-postgresql/blob/master/manifests/bind-postgresql-to-application.yaml"&gt;ServiceBindingRequest CR&lt;/a&gt; that gets processed by the Service Binding Operator.&lt;/p&gt; &lt;p&gt;Last, we deploy our &lt;a target="_blank" rel="nofollow" href="https://github.com/application-stacks/sample-service-binding-postgresql/blob/master/app-deploy.yaml"&gt;RuntimeComponent CR&lt;/a&gt; (in this case, a Spring Boot microservice), which is managed by the Runtime Component Operator.&lt;/p&gt; &lt;h3&gt;Future enhancements&lt;/h3&gt; &lt;p&gt;Future enhancements will include being able to generate a &lt;code&gt;ServiceBindingRequest&lt;/code&gt; CR from a given &lt;code&gt;RuntimeComponent&lt;/code&gt; CR. Figure 2 shows the pattern we want to achieve:&lt;/p&gt; &lt;div id="attachment_711737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-711737" class="wp-image-711737 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-22-at-7.27.21-AM-1024x377.png" alt="A flow diagram of Service Binding Operator generating a ServiceBindingRequest CR from a given RuntimeComponent CR." width="640" height="236" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-22-at-7.27.21-AM-1024x377.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-22-at-7.27.21-AM-300x110.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/Screen-Shot-2020-04-22-at-7.27.21-AM-768x283.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-711737" class="wp-caption-text"&gt;Figure 2. Service Binding Operator generates a ServiceBindingRequest CR from a given RuntimeComponent CR.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The application code could then safely navigate all of its bindings via the top-level &lt;code&gt;SERVICE_BINDINGS&lt;/code&gt; environment variable, which would look something like this:&lt;/p&gt; &lt;pre&gt;SERVICE_BINDINGS = { "bindingKeys": [ { "name": "KAFKA_USERNAME", "bindAs": "envVar" }, { "name": "KAFKA_PASSWORD", "bindAs": "volume", "mountPath": "/platform/bindings/secret/" } ] } &lt;/pre&gt; &lt;h2&gt;Open Liberty Operator: Optimize your deployments&lt;/h2&gt; &lt;p&gt;At the beginning of this article, I noted that Runtime Component Operator is the upstream project for Open Liberty Operator. Everything you&amp;#8217;ve seen so far, in terms of capabilities and bindings, applies to Open Liberty Operator.&lt;/p&gt; &lt;p&gt;Even better, if you know the runtime is Open Liberty, you can use a configuration in Open Liberty Operator for features that are specific to that runtime. We&amp;#8217;ll look at two of these capabilities.&lt;/p&gt; &lt;h3&gt;Liberty&amp;#8217;s SSO integration&lt;/h3&gt; &lt;p&gt;Open Liberty Operator supports Liberty&amp;#8217;s single sign-on (SSO) Social Media Login feature. Because of this, it can delegate authenticating an application user to an external provider such as Google, Facebook, LinkedIn, Twitter, GitHub, or any OpenID Connect (OIDC) or OAuth 2.0 client.&lt;/p&gt; &lt;p&gt;Your first step is to &lt;a target="_blank" rel="nofollow" href="https://openliberty.io/blog/2019/08/29/securing-microservices-social-login-jwt.html"&gt;enable the Social Media Login in your code&lt;/a&gt;. Once you have done that, you can create the appropriate social media login secrets (such as a GitHub &lt;code&gt;clientID&lt;/code&gt;) and configure your &lt;code&gt;OpenLibertyApplication&lt;/code&gt; deployment to wire it all together. You can find detailed information and code samples in the &lt;a target="_blank" rel="nofollow" href="https://github.com/OpenLiberty/open-liberty-operator/blob/master/doc/user-guide.adoc"&gt;Open Liberty Operator User Guide&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Day-2 Operations&lt;/h3&gt; &lt;p&gt;The Day-2 Operations feature is a popular Open Liberty runtime feature for gathering traces and triggering a JVM dump. In Open Liberty Operator, each of these actions is available in a highly specialized custom resource definition (CRD), which ensures a minimalist user experience.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a quick look at how you would set a trace:&lt;/p&gt; &lt;pre&gt;apiVersion: openliberty.io/v1beta1 kind: OpenLibertyTrace metadata: name: example-trace spec: podName: my-pod traceSpecification: "*=info:com.ibm.ws.webcontainer*=all" maxFileSize: 20 maxFiles: 5 &lt;/pre&gt; &lt;p&gt;As you can see, the code is straightforward and intuitive for Open Liberty users. Visit the &lt;a href="https://github.com/OpenLiberty/open-liberty-operator/blob/master/doc/user-guide.adoc" target="_blank" target="_blank" rel="nofollow" noreferrer"&gt;Open Liberty Operator User Guide&lt;/a&gt; for complete configuration details.&lt;/p&gt; &lt;h2&gt;Ready to get started?&lt;/h2&gt; &lt;p&gt;Both Runtime Component Operator and Open Liberty Operator are available from the Red Hat OpenShift OperatorHub. You can quickly install them cluster-wide, or you could use a namespace-scoped installation via the Operator Lifecycle Manager (OLM) framework. Both Operators are open source, so there are no usage restrictions. Grab your favorite runtime component and give it a try with one of these Operators—you&amp;#8217;ll notice the enterprise boost right away.&lt;/p&gt; &lt;p&gt;When you are ready to move into a production scenario and want support, I encourage you to check out &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/products/runtimes"&gt;Red Hat Runtimes&lt;/a&gt;, which contains Open Liberty.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#38;linkname=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F18%2Fdeploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators%2F&amp;#038;title=Deploy%20and%20bind%20enterprise-grade%20microservices%20with%20Kubernetes%20Operators" data-a2a-url="https://developers.redhat.com/blog/2020/05/18/deploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators/" data-a2a-title="Deploy and bind enterprise-grade microservices with Kubernetes Operators"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/18/deploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators/"&gt;Deploy and bind enterprise-grade microservices with Kubernetes Operators&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RgaUsMAL6sE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Deploying enterprise-grade runtime components into Kubernetes can be daunting. You might wonder: How do I fetch a certificate for my app? What&amp;#8217;s the syntax for autoscaling resources with the Horizontal Pod Autoscaler? How do I link my container with a database and with a Kafka cluster? Are my metrics going to Prometheus? Also, how do [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/18/deploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators/"&gt;Deploy and bind enterprise-grade microservices with Kubernetes Operators&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">678087</post-id><dc:creator>Arthur De Magalhaes</dc:creator><dc:date>2020-05-18T07:00:10Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/18/deploy-and-bind-enterprise-grade-microservices-with-kubernetes-operators/</feedburner:origLink></entry><entry><title>Cloud-native development - A blueprint</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Dp74KIuuDJw/cloud-native-development-a-blueprint.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="best practices" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_development_a_blueprint</id><updated>2020-05-22T14:37:33Z</updated><published>2020-05-18T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s1600/cloud-native-development-ld.png" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-7Y4CiiYTYj4/Xr50P1i2xAI/AAAAAAAAxIw/h2j8QBiLk20JYX-6dJkeJVOv_Ud9XvzdQCNcBGAsYHQ/s320/cloud-native-development-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 1 - A blueprint&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;After starting with architectural blueprints introducing both&amp;nbsp;&lt;a href="http://www.schabell.org/2018/11/integration-key-to-customer-experience-introduction.html" target="_blank"&gt;omnichannel integration&lt;/a&gt;&amp;nbsp;and &lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;integrating with SaaS applications&lt;/a&gt;, we're presenting the results of a cloud-native development blueprint.&lt;br /&gt;&lt;br /&gt;What's in an architectural blueprint and what's the focus you ask?&lt;br /&gt;&lt;br /&gt;It's an interesting challenge in that we've been creating of architectural content based on common customer adoption patterns. That's very different from most of the traditional marketing activities usually associated with generating content for the sole purpose of positioning products for solutions. When you're basing the content on actual execution in solution delivery, you're cutting out the&amp;nbsp;marketing&amp;nbsp;&lt;i&gt;chuff.&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;These &lt;i&gt;architectural blueprints&lt;/i&gt; are providing you with a way to implement a solution using open source technologies focusing on the integrations, structures and interactions proven to work. What's not included are any vendor stories that you'll find in normal marketing content. Those stories that when it gets down to implementation crunch time, might not fully deliver on their promises.&lt;br /&gt;&lt;br /&gt;Let's look at the cloud-native development blueprint and explore their value in helping your solution designs.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;The process&lt;/h3&gt;&lt;div&gt;The first step is to define what we are focusing on when talking about cloud-native development.&lt;br /&gt;&lt;br /&gt;We've chosen the following statement to guide our blueprint:&amp;nbsp;&lt;i&gt;'Cloud-native development is an approach to building and running applications to fully exploit the advantages of the cloud computing model (i.e. responsive, elastic and resilient applications).'&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-jXe4D_KUTtg/Xr5YE3N79sI/AAAAAAAAxIg/hzH3JWBVXc0Oeia7eQ5JLFwa5OX7E_rqgCNcBGAsYHQ/s1600/cloud-native-dev.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="cloud-native development" border="1" data-original-height="846" data-original-width="1491" height="181" src="https://1.bp.blogspot.com/-jXe4D_KUTtg/Xr5YE3N79sI/AAAAAAAAxIg/hzH3JWBVXc0Oeia7eQ5JLFwa5OX7E_rqgCNcBGAsYHQ/s320/cloud-native-dev.png" title="" width="320" /&gt;&lt;/a&gt;This is the principle guiding our research into how customers are looking at developing&amp;nbsp;their applications in a cloud-native world.&lt;i&gt;&amp;nbsp;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The approach is researching several existing customers with implemented solutions in this space, collecting their content, researching the internal implementation documentation, and where necessary reaching out to the field resources involved.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Project examples&lt;/h3&gt;&lt;div&gt;Sharing the process results for cloud-native development blueprint is what this series is about, but there are the project artifacts and diagrams that can also be shared with you the reader. We've pulled together an &lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;examples repository&lt;/a&gt; for all our architecture blueprint diagrams.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://1.bp.blogspot.com/-22Ct14crzWk/Xr51pUFnehI/AAAAAAAAxJA/IqrU3TsshCoJ1vaVD3aiKYmwh4KPqQNYwCNcBGAsYHQ/s1600/Screenshot%2B2020-05-15%2Bat%2B12.57.27.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="1" data-original-height="253" data-original-width="522" height="155" src="https://1.bp.blogspot.com/-22Ct14crzWk/Xr51pUFnehI/AAAAAAAAxJA/IqrU3TsshCoJ1vaVD3aiKYmwh4KPqQNYwCNcBGAsYHQ/s320/Screenshot%2B2020-05-15%2Bat%2B12.57.27.png" width="320" /&gt;&lt;/a&gt;The &lt;a href="https://gitlab.com/redhatdemocentral/portfolio-architecture-examples" target="_blank"&gt;Portfolio Architecture Examples&lt;/a&gt; repository makes it possible to collect and share individual images from each diagram element as well as the entire project as a whole.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For example, if you scroll down to the file listings on the main page, you can locate a logical diagram as shown in the image.&lt;br /&gt;&lt;br /&gt;This is the collection for the logical diagrams associated with cloud-native development:&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;in this case it's a single image you can click to view&lt;/li&gt;&lt;li&gt;a project file you can download to your local machine using the&amp;nbsp;&lt;i&gt;Download Diagram&lt;/i&gt;&amp;nbsp;link&lt;/li&gt;&lt;li&gt;a &lt;i&gt;Load Diagram&lt;/i&gt;&amp;nbsp;link that you can click to automatically open the project diagrams in the diagram tooling used in this blueprint&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Give it a try and feel free to explore the collection of logical, schematic, detailed, solution, and community diagrams. This should allow you to get started much quicker than from scratch if you can kick-start a project with existing diagrams.&lt;br /&gt;&lt;br /&gt;Should you design your own diagrams, please contribute the project file (ending in .drawio) by raising an issue with the file attached. We'd love to continue collecting these projects for others to use.&lt;br /&gt;&lt;br /&gt;Finally, there is a free online&amp;nbsp;&lt;a href="https://redhatdemocentral.gitlab.io/portfolio-architecture-workshops" target="_blank"&gt;beginners guide workshop&lt;/a&gt; available focused on using the diagram tooling, please explore to learn tips and tricks from the experts.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on the cloud-native development portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/05/cloud-native-development-a-blueprint.html" target="_blank"&gt;A blueprint&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Common architectural elements&lt;/li&gt;&lt;li&gt;Cloud-native development on local containers&lt;/li&gt;&lt;li&gt;Cloud-native development on remote containers&lt;/li&gt;&lt;li&gt;Cloud-native deployments&lt;/li&gt;&lt;li&gt;Cloud-native advanced deployments&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at the&amp;nbsp;generic common architectural elements&amp;nbsp;associated with cloud-native development and deployments.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=LMZUbv8yRrE:5bt2tnE67Wc:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=LMZUbv8yRrE:5bt2tnE67Wc:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=LMZUbv8yRrE:5bt2tnE67Wc:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=LMZUbv8yRrE:5bt2tnE67Wc:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=LMZUbv8yRrE:5bt2tnE67Wc:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/LMZUbv8yRrE" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Dp74KIuuDJw" height="1" width="1" alt=""/&gt;</content><summary>Part 1 - A blueprintAfter starting with architectural blueprints introducing both omnichannel integration and integrating with SaaS applications, we're presenting the results of a cloud-native development blueprint. What's in an architectural blueprint and what's the focus you ask? It's an interesting challenge in that we've been creating of architectural content based on common customer adoption ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-05-18T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/LMZUbv8yRrE/cloud-native-development-a-blueprint.html</feedburner:origLink></entry><entry><title>Change data capture for microservices without writing any code</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RhDZ6CObxbY/" /><category term="Event-Driven" /><category term="Kubernetes" /><category term="Microservices" /><category term="Open source" /><category term="Apache Kafka" /><category term="debezium" /><category term="kafka connect" /><category term="openshift" /><category term="Strimzi" /><author><name>Abdellatif BOUCHAMA</name></author><id>https://developers.redhat.com/blog/?p=710937</id><updated>2020-05-15T07:00:53Z</updated><published>2020-05-15T07:00:53Z</published><content type="html">&lt;p&gt;Want to smoothly modernize your legacy and monolithic applications to microservices or cloud-native without writing any code? Through this demonstration, we show you how to achieve the following change data capture scenario between two microservices on &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt; using the combination of &lt;a target="_blank" rel="nofollow" href="https://syndesis.io/"&gt;Syndesis&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://strimzi.io/"&gt;Strimzi&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://debezium.io/"&gt;Debezium&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;img class=" aligncenter wp-image-710987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2020/04/CDC-Fuse-1024x499.png" src="https://developers.redhat.com/blog/wp-content/uploads/2020/04/CDC-Fuse-1024x499.png" alt="architecture diagram" width="640" height="312" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/04/CDC-Fuse-1024x499.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/CDC-Fuse-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/CDC-Fuse-768x374.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/04/CDC-Fuse.png 1028w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span id="more-710937"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Watch the following video to learn how to achieve this architecture. By the end of this video, you will be able to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Install Syndesis on OpenShift.&lt;/li&gt; &lt;li&gt;Design, create, build, and deploy microservices on OpenShift.&lt;/li&gt; &lt;li&gt;Install Kafka on OpenShift with Strimzi.&lt;/li&gt; &lt;li&gt;Deploy Kafka Connect with Debezium plugins.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/iuyvx_7wrcg?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#38;linkname=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F05%2F15%2Fchange-data-capture-for-microservices-without-writing-any-code%2F&amp;#038;title=Change%20data%20capture%20for%20microservices%20without%20writing%20any%20code" data-a2a-url="https://developers.redhat.com/blog/2020/05/15/change-data-capture-for-microservices-without-writing-any-code/" data-a2a-title="Change data capture for microservices without writing any code"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/15/change-data-capture-for-microservices-without-writing-any-code/"&gt;Change data capture for microservices without writing any code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RhDZ6CObxbY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Want to smoothly modernize your legacy and monolithic applications to microservices or cloud-native without writing any code? Through this demonstration, we show you how to achieve the following change data capture scenario between two microservices on Red Hat OpenShift using the combination of Syndesis, Strimzi, and Debezium. Watch the following video to learn how to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/05/15/change-data-capture-for-microservices-without-writing-any-code/"&gt;Change data capture for microservices without writing any code&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><post-id xmlns="com-wordpress:feed-additions:1">710937</post-id><dc:creator>Abdellatif BOUCHAMA</dc:creator><dc:date>2020-05-15T07:00:53Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/05/15/change-data-capture-for-microservices-without-writing-any-code/</feedburner:origLink></entry></feed>
